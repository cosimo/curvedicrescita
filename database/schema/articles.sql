--
-- Populate articles file
-- 
-- $Id: articles.sql,v 1.6 2007/06/05 22:31:05 cosimo Exp $
--

/*use opera;*/

insert into articles (id,title,content,createdby,createdon,lastupdateby,lastupdateon,keywords,views) values
    (1,'Test of stripped html','Test of  html ','cosimo','2007-05-28 19:43:31','','0000-00-00 00:00:00','html strip content',2),
    (2,'Compare and contrast of Perl with C','This is a brief comparison of Perl & C.\r\n\r\nC (196x)\r\n  - Low level language compiled to machine code. Fast!\r\n  - Staticly typed. No generic programming.\r\n  - C programs portable only if using only the standard library\r\n    (sometimes even with stdlib this is not the case)\r\n  - Manual memory allocation. No garbage collector.\r\n  - No Object-Orientation built in the language (it didn\'t exist!)\r\n    but there are structures and function pointers.\r\n  - No exceptions\r\n  - External libraries link and extensions are easy to develop\r\n  - Debugging and profiling is easy. Many tools available (gdb, gprof).\r\n  - No CPAN ;-)\r\n\r\nPerl (1987)\r\n\r\n  - Very high level language with some peculiar low-level C-like features,\r\n    (ex.: sysopen, syswrite, ioctl)\r\n  - Two-pass interpreter. Source is parsed into bytecode. Bytecode is run.\r\n  - Dynamicly typed. Variables don\'t need their type declared.\r\n    Generic programming is naturally possible.\r\n  - Portable like nothing else! Personally I\'ve seen it run under Windows,\r\n    Mac OS 9/X, Linux, BSD, AS/400, Novell Netware and OS/2.\r\n  - Automatic reference-counting garbage collector\r\n  - \"Add-on\" Object-Oriented system. It was included in Perl from V5.0\r\n    with a mechanism that is very simple even if not \"pure\", based\r\n    essentially on \"bless\" keyword.\r\n  - Very simple exceptions (eval/die). Finer exception handling requires\r\n    installation of additional classes (Error.pm for example)\r\n  - Developing/building extensions is a complex task (XS)\r\n  - Debugger is not so friendly (ddd?).\r\n    Profiling and benchmarking is better (Devel::DProf, Benchmark)\r\n  - CPAN :-)\r\n','cosimo','2007-05-28 19:47:33','','0000-00-00 00:00:00','perl c compare programming language',0),
    (3,'Comparation of MySQL with PostgreSQL','I\'m comparing MySQL with PostgreSQL.\r\nI know Pg well, I use it since 1999, while I have average MySQL experience. I also regularly follow Pg (performance, sql) mailing lists.\r\n\r\nIn my current job, we use Pg primarily, even if the entire framework and applications we developed generates database-independent SQL statements, not only thanks to DBI but also to an additional classes I designed and developed that abstracts the differences between various SQL engines (ex.: LIMIT, CREATE TABLE, column name quoting, placeholders support, ...)\r\n\r\nMySQL:\r\n  - Different storage engines (MyISAM, InnoDB, BDB, ...)\r\n    Having different storage engines is a plus if you need particular tables to be fast, or to support particular needs (fulltext indexing, for example). It can be tricky when you want to have transactions that span across tables created with different engines)\r\n  - MyISAM engine is very fast, can do full text indexing easily, but doesn\'t support transactions\r\n  - Default server performance is good. Comes with different config files.\r\n  - Clustering and replication have standard solutions.\r\n  - Altering tables on live systems can take a long time.\r\n  - A useful caching layer built in with HEAP tables!\r\n  - Merging of large tables (ex. logs or backlog files) is supported\r\n    directly with the Merge storage engine.\r\n\r\nPostgreSQL:\r\n  - Standards compliant (SQL/92, most SQL/99)\r\n  - Transactions safe. Supports most transaction isolation levels.\r\n  - Performance tuning is necessary and it\'s not easy.\r\n    Default settings don\'t scale to high-load servers.\r\n  - Clustering difficult. Additional software required (Slony) for\r\n    master/slave replication. With V8.x there is the wal logs replication feature.\r\n  - Locking at table, page or row level.\r\n  - Altering tables is straight-forward and generally fast.\r\n  - Can be backed up while running (pg_dump)\r\n  - Merging many equal tables requires a cumbersome approach\r\n    (create base and inherited tables + view defined as UNION of all tables to be merged)\r\n','cosimo','2007-05-28 19:49:14','','0000-00-00 00:00:00','mysql postgresql compare database sql',7),
    (4,'Common pitfalls when using mod_perl/mod_python','I tried out mod_perl 1.x series some years ago, doing experiments and\r\nresearch work. My findings are based on that (somewhat limited) exposure.\r\n\r\n- When migrating from simple CGI to persistent engines, use of global variables normally causes problems, because globals don\'t get reset when a new request arrives to the server.\r\n- It\'s better to have a modular approach, writing CGIs as subroutines\r\n  collection (CGI::Application style), instead of big single scripts.\r\n- Every HTTP request can get assigned to a different mod_perl/python backend. If you use sessions, for example, you should ensure persistent (disk/memcached) session storage. In general, one should try to avoid \"shared\" data.\r\n- SQL connection pooling and persistence (rollback - commit hanno effetto anche sulle transazioni seguenti)\r\n','cosimo','2007-05-28 19:50:42','','0000-00-00 00:00:00','modperl perl persistent pitfalls',3),
    (5,'The 20 servers mission','This question is really interesting. I must say I don\'t have real-world experience of such architectures, but what I tried to keep myself informed for personal interest and training, so I propose my solution :-)\r\n\r\nI\'m deliberately excluding firewall, DNS and backup services that probably are already established in your own environment.\r\n\r\nI\'m also assuming that every server is itself redundant, with at least:\r\n  - 2 independent power supplies/lines\r\n  - 2 100M/1G ethernet cards (with bonding)\r\n  - Some RAID setup for HDD, maybe RAID 1, inexpensive and efficient.\r\n\r\nHere is my subdivision of machines.\r\n\r\n  - 2 load balancers (1 active + 1 passive)\r\n\r\n    As l.b. I mean an hardware appliance or software solution like perlbal, to say something I know. One configured as active and one \"hot-swap\" replica, ready to take control in case of failure. I chose this active/passive strategy because of simplicity and also because I don\'t know if there is a load-balancer that can be run in multiple instances. If there is, probably that is better.\r\n\r\n    Random balancing policy among frontends should be ok.\r\n\r\n  - 6 http front-end servers\r\n\r\n    These servers should run squid in a typical reverse-proxy configuration on port 80, where they act as caching servers for (possibly slow) clients, removing unnecessary load from httpd backends, serving all static content and requesting dynamic content to a set of httpd backends.\r\n\r\n  - 12 application server backends\r\n\r\n    Real application load is here, where each machine has database (MySQL?) on it, Perl/mod_perl/whatever, maybe `memcached\' would be a good idea also, to drop the hits on real database.\r\n\r\n    Ideally these machines should be a mirror copy of each other, with nothing shared. I tried to estimate a possible database size for MyOpera, knowing that it has ~ 800,000 users. Let\'s suppose that a copy of the entire database can be fully loaded on each server. Then all servers could be identical copies. That eases management, backup and failover procedures.\r\n\r\n    A MySQL master/slave setup should be configured, either with 1 master and 11 slaves (easier but is there sufficient bandwidth for slaves replication?), or with 2 clusters, each one with 1 master and 5 slaves, with a multi-master replication.\r\n\r\n    If the whole database can\'t fit into each server, then everything complicates. Probably a partitioning approach can help, where some servers hold the users table, others have the articles/blog database, ...\r\n\r\n    A software layer in the application could address database queries that go to users table on cluster 1, blog table queries on cluster 2, etc.\r\n\r\n  Considerations:\r\n\r\n  I think this type of architecture is *very* dependent on the amount of static files (photos, for example), size of database, read/write ratio of application, whether there is a central repository for shared files (a Samba cluster for photos would be ok probably), ...\r\n\r\n  So one could decide to put Perl/mod_perl on http front-end servers and leave application servers only with database on them. There are lots of possibilities. I hope to have covered some of your concerns. It\'s clear that I don\'t have the perfect solution. I only want to show you that I can analyze and propose various solutions depending on your parameters.\r\n','cosimo','2007-05-28 19:54:40','','0000-00-00 00:00:00','my opera architecture',3),
    (6,'Common pitfalls when developing in Perl or Python','I consider Perl because I have more experience on it.\r\n\r\n- The greatest pitfall is not using \'strict\' :-)\r\n\r\n- Special vars are global\r\n\r\n  Use of special var `$_\' normally can cause problems, because\r\n  it is always global, unless you localize it. Example:\r\n\r\n  for(@list) {\r\n    my $n = double($_);\r\n    my $m = triple($_);\r\n    # ...\r\n  }\r\n  # if double() modifies `$_\' internally, `$m\' is going to contain\r\n  # something you don\'t expect...\r\n\r\n  In this case, `local $_\' helps localizing $_ value, or, better,\r\n  I use this rule: avoid `$_\' when there is a function call inside loop body.\r\n\r\n  - Aliasing\r\n\r\n    Automatic aliasing can be a source of errors. Suppose I want to print the uppercase strings in `@str\' array.  Example:\r\n\r\n    for(@str) {\r\n        $_ = uc($_);\r\n        print\r\n    }\r\n   \r\n    After this code, `@str\' won\'t contain the original values, but the uppercased ones.\r\n\r\n  - Dereferencing\r\n  \r\n    Dereferencing something (arrayref, hashref, coderef) without checking before. This is one of the nastier pitfalls, because wild dereference can lead to sudden script halts with no clue of why, or in the better case, to a \"Can\'t use undefined value as a ... reference\" or \"Can\'t use string ... as a ... reference\"\r\n\r\n  - Context\r\n \r\n    Wrong interpretation of context can lead to unexpected results.\r\n    Example:\r\n        my $list = (1, 2, 3);\r\n\r\n  - Function calls\r\n  \r\n    Difference between function call with or without `&\' char can be really subtle. `&func\' calls function keeping the value of @_, while `func()\' does not.\r\n\r\n  - Cross-platform issues\r\n \r\n    I try to avoid use of \'/\' or (worse) \'\\\\\' in pathnames to keep Unix/Win compatibility. I use File::Spec catfile, catdir, is_absolute_... When reading/writing binary files, I use always `binmode()\' to avoid corrupting graphics files or other binary streams under Windows.\r\n\r\n  - Implicit return values\r\n  \r\n    I try to always put an explicit `return\' statement at the end of functions. When you don\'t do that, and immediately before the return there is a *big* scalar, there\'s the risk of the interpreter implicitly returning it to caller function, slowing down everything without knowing why...\r\n\r\n  - ...\r\n','cosimo','2007-05-28 20:10:09','','0000-00-00 00:00:00','perl python pitfalls programming',0),
    (7,'The MyOperaTest application by Cosimo is great','I should say that this MyOperaTest application is really great!\r\nNo, no, no... wait, it has some serious bugs... Ah, ok, I found them... so it\'s not so great, after all.','vetler','2007-05-28 20:11:58','','0000-00-00 00:00:00','test application cosimo opera',0),
    (8,'The Test Application by Cosimo is great!!','I should say that this MyOperaTest application is really great!\r\nNo, no, no... wait, it has some serious bugs... Ah, ok, I found them... so it\'s not so great, after all.\r\n\r\n***EDIT BY VETLE****\r\n\r\nNo, no no..  it\'s full of bugs.... \r\nBleah...\r\n\r\n\r\n','vetler','2007-05-28 20:11:58','vetler','2007-06-02 16:07:07','test application cosimo opera',46),
    (9,'Example of an article with strange keywords','The only purpose of this article is to demonstrate the use of strange keywords. What will happen when the keywords get inserted into the output html template???\r\n\r\nCool!\r\n','cosimo','2007-05-29 20:22:30','vetler','2007-06-02 16:06:16','This is a strange keyword script languagejavascriptalertHELLO/javascript',12),
    (11,'Last week in Italy','This will be my last week in Italy before backpacking to Norway and starting a new job at Opera Software in Oslo.\r\n\r\nI\'m really excited for this and I hope I\'ll have a great time within the IS team at Opera and learn a lot of new and interesting stuff.\r\n\r\nI must thank my colleagues at Satel Group where I\'ve worked since 2002 (more than 5 years of my life!), especially Lucio who gave me the opportunity to work in the IT world and who has always believed in me; Cosimo who has been my mentor for all this years and for all his help and patience; Giorgio who taught me 1 or 2 things about the analysis process, the attention for details and the user point of view.\r\n\r\nThank you, guys and goodbye to all the others!\r\nI hope we\'ll stay tuned!\r\n~ ~ ~ ~ ~\r\n\r\nA special mandi! to all my friends in Italy (and around the world) and to all the choristers of the \"HARMONIA\"\'s choir .\r\nI\'ll try to organize a concert in Oslo... ;)\r\nAnyway we\'ll keep in contact!\r\n\r\n\r\n\r\n\r\n\r\n','edoardo','2007-05-30 20:34:59','vetler','2007-06-02 15:38:21','choir norway opera personal satel group',31),
    (14,'My last trip to Trondheim','I must say that I have never been in Trondheim.\r\n\r\nBut this city is clearly present in a corner of my mind because when I navigated for the first times on the internet, and I made my way through the immense cyberspace (those days when Google wasn\'t born yet), there was a powerful server that indexed all http and ftp sites for file names.\r\n\r\nThis server was the famous FTP File search, that was \"located in Trondheim, Norway\" ...\r\n\r\nI always wondered where Trondheim was, and finally, I found it!\r\n','cosimo','2007-06-02 16:23:24','','0000-00-00 00:00:00','mountain travel fjords oslo norway',47);

/*
select id,title from articles where match(title,content,keywords) against ('test' in boolean mode);
*/
